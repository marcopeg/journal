version: "2.1"
services:
  ###
  ### APPLICATION
  ###

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      args:
        REACT_APP_HASURA_URL: /v1/graphql
        REACT_APP_AUTH0_CLIENT_ID: ${REACT_APP_AUTH0_CLIENT_ID:-xxx}
        REACT_APP_AUTH0_DOMAIN: ${REACT_APP_AUTH0_DOMAIN:-xxx}
        REACT_APP_AUTH0_AUDIENCE: ${REACT_APP_AUTH0_AUDIENCE:-xxx}
    depends_on:
      hasura:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    environment:
      PROXY_PASS: http://hasura:8080

  ###
  ### UTILITIES
  ###

  migrations:
    container_name: migrations
    build:
      context: ./services/migrations
    depends_on:
      hasura:
        condition: service_healthy
    volumes:
      - ./services/migrations/metadata:/metadata:cached
      - ./services/migrations/migrations:/migrations:cached
      - ./services/migrations/seeds:/seeds:cached
    environment:
      HASURA_ENDPOINT: http://hasura:8080
      HASURA_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
      HASURA_SKIP_SEEDS: ${MIGRATIONS_SKIP_SEEDS}
    stdin_open: true
    tty: true

  ###
  ### INFRASTRUCTURE
  ###

  hasura:
    container_name: hasura
    image: hasura/graphql-engine:v1.3.0
    build:
      context: ./services/hasura
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${HASURA_PORT:-8080}:8080"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "anonymous"
    healthcheck:
      test: ["CMD", "wget", "-qO", "-", "http://hasura:8080/healthz"]
      interval: 5s
      timeout: 5s
      retries: 20

  postgres:
    container_name: postgres
    build:
      context: ./services/postgres
    restart: always
    ports:
      - "${PG_PORT:-5432}:5432"
    volumes:
      - ./docker-data/pg:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 20

  postgres-backup-s3:
    build:
      context: ./services/postgres-backup-s3
    links:
      - postgres
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DATABASE: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_EXTRA_OPTS: "--schema=public --data-only --inserts --disable-trigger"
      S3_REGION: ${BACKUP_S3_REGION:-"eu-west-1"}
      S3_ACCESS_KEY_ID: ${BACKUP_S3_KEY:-**None**}
      S3_SECRET_ACCESS_KEY: ${BACKUP_S3_SECRET:-**None**}
      S3_BUCKET: ${BACKUP_S3_BUCKET:-**None**}
      S3_PREFIX: ${BACKUP_S3_PREFIX:-**None**}
      S3_PASSWORD: ${BACKUP_S3_PASSWORD:-**None**}
      SCHEDULE: ${BACKUP_SCHEDULE:-"@daily"}

  adminer:
    container_name: adminer
    image: adminer:4.7
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    links:
      - postgres:db
    ports:
      - "${ADMINER_PORT:-8081}:8080"
